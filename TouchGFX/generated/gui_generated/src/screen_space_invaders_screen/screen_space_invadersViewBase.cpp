/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_space_invaders_screen/screen_space_invadersViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screen_space_invadersViewBase::screen_space_invadersViewBase() :
    buttonCallback(this, &screen_space_invadersViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background_black.setBitmap(touchgfx::Bitmap(BITMAP_BLACK_BG_ID));
    background_black.setPosition(0, 0, 480, 272);
    background_black.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(background_black);

    btn_left.setXY(340, 198);
    btn_left.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_LEFT_50_50_E8F6FB_SVG_ID));
    btn_left.setIconXY(-7, -7);
    btn_left.setAlpha(90);
    add(btn_left);

    btn_right.setXY(424, 198);
    btn_right.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_RIGHT_50_50_E8F6FB_SVG_ID));
    btn_right.setIconXY(-7, -7);
    btn_right.setAlpha(90);
    add(btn_right);

    btn_fire.setXY(382, 156);
    btn_fire.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_MAPS_LOCAL_FIRE_DEPARTMENT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_MAPS_LOCAL_FIRE_DEPARTMENT_50_50_E8F6FB_SVG_ID));
    btn_fire.setIconXY(-7, -7);
    btn_fire.setAlpha(90);
    btn_fire.setAction(buttonCallback);
    add(btn_fire);

    enemy1.setBitmap(touchgfx::Bitmap(BITMAP_SPACE_INVADERS_ENEMY_ID));
    enemy1.setPosition(0, 0, 50, 52);
    enemy1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(enemy1);

    ship.setBitmap(touchgfx::Bitmap(BITMAP_SPACE_INVADERS_SHIP_ID));
    ship.setPosition(8, 204, 84, 60);
    ship.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(ship);

    bullet.setPosition(45, 168, 10, 36);
    bulletPainter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    bullet.setPainter(bulletPainter);
    bullet.setStart(5, 5);
    bullet.setEnd(5, 30);
    bullet.setLineWidth(10);
    bullet.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(bullet);

    btn_back.setXY(12, 12);
    btn_back.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_BACKSPACE_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_BACKSPACE_50_50_E8F6FB_SVG_ID));
    btn_back.setIconXY(-7, -7);
    btn_back.setVisible(false);
    btn_back.setAction(buttonCallback);
    add(btn_back);

    lbl_game_over.setXY(118, 85);
    lbl_game_over.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    lbl_game_over.setLinespacing(0);
    lbl_game_over.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BG0R));
    lbl_game_over.setVisible(false);
    add(lbl_game_over);

    lbl_game_over_1.setXY(118, 85);
    lbl_game_over_1.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    lbl_game_over_1.setLinespacing(0);
    lbl_game_over_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4O0Y));
    lbl_game_over_1.setVisible(false);
    add(lbl_game_over_1);

    lbl_win.setXY(194, 136);
    lbl_win.setColor(touchgfx::Color::getColorFromRGB(5, 255, 22));
    lbl_win.setLinespacing(0);
    lbl_win.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I2AS));
    lbl_win.setVisible(false);
    add(lbl_win);

    lbl_lose.setXY(194, 136);
    lbl_lose.setColor(touchgfx::Color::getColorFromRGB(255, 5, 5));
    lbl_lose.setLinespacing(0);
    lbl_lose.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2AHD));
    lbl_lose.setVisible(false);
    add(lbl_lose);
}

screen_space_invadersViewBase::~screen_space_invadersViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void screen_space_invadersViewBase::setupScreen()
{

}

void screen_space_invadersViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn_fire)
    {
        //intr_fire_bullet
        //When btn_fire clicked call virtual function
        //Call fire_bullet
        fire_bullet();
    }
    if (&src == &btn_back)
    {
        //intr_back
        //When btn_back clicked change screen to screen_main_menu
        //Go to screen_main_menu with no screen transition
        application().gotoscreen_main_menuScreenNoTransition();
    }
}
