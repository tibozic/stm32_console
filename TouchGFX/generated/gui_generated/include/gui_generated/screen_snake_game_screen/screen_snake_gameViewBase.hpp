/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN_SNAKE_GAMEVIEWBASE_HPP
#define SCREEN_SNAKE_GAMEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen_snake_game_screen/screen_snake_gamePresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class screen_snake_gameViewBase : public touchgfx::View<screen_snake_gamePresenter>
{
public:
    screen_snake_gameViewBase();
    virtual ~screen_snake_gameViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void game_snake_start()
    {
        // Override and implement this function in screen_snake_game
    }
    virtual void change_direction_up()
    {
        // Override and implement this function in screen_snake_game
    }
    virtual void change_direction_left()
    {
        // Override and implement this function in screen_snake_game
    }
    virtual void change_direction_down()
    {
        // Override and implement this function in screen_snake_game
    }
    virtual void change_direction_right()
    {
        // Override and implement this function in screen_snake_game
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::ButtonWithIcon btn_left;
    touchgfx::ButtonWithIcon btn_up;
    touchgfx::ButtonWithIcon btn_down;
    touchgfx::ButtonWithIcon btn_right;
    touchgfx::Box food;
    touchgfx::ButtonWithLabel btn_snake_start;
    touchgfx::TextArea lbl_game_over;
    touchgfx::TextAreaWithOneWildcard lbl_high_score;
    touchgfx::TextArea lbl_new_high_score;
    touchgfx::ButtonWithIcon btn_back;
    touchgfx::TextArea lbl_score;
    touchgfx::TextAreaWithOneWildcard lbl_score_val;

    /*
     * Wildcard Buffers
     */
    static const uint16_t LBL_HIGH_SCORE_SIZE = 20;
    touchgfx::Unicode::UnicodeChar lbl_high_scoreBuffer[LBL_HIGH_SCORE_SIZE];
    static const uint16_t LBL_SCORE_VAL_SIZE = 20;
    touchgfx::Unicode::UnicodeChar lbl_score_valBuffer[LBL_SCORE_VAL_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<screen_snake_gameViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN_SNAKE_GAMEVIEWBASE_HPP
